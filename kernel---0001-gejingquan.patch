From e51817772eab1fcc54ffc281f3779d4ad29403ad Mon Sep 17 00:00:00 2001
From: gerty1986823 <gerty1986823@126.com>
Date: Thu, 7 Jan 2021 17:40:55 +0800
Subject: [PATCH] gejingquan

Signed-off-by: gerty1986823 <gerty1986823@126.com>
---
 arch/arm64/kernel/entry.S |   8 +--
 arch/arm64/mm/fault.c     |  37 ++++++++++++++
 drivers/tee/optee/call.c  |  20 ++++++++
 drivers/tee/tee_private.h |   1 +
 drivers/tee/tee_shm.c     | 126 +++++++++++++++++++++++++++++++++++++++++++++-
 patch.sh                  |  15 ++++++
 6 files changed, 199 insertions(+), 8 deletions(-)
 create mode 100755 patch.sh

diff --git a/arch/arm64/kernel/entry.S b/arch/arm64/kernel/entry.S
index e1c59d4..e776cc7 100644
--- a/arch/arm64/kernel/entry.S
+++ b/arch/arm64/kernel/entry.S
@@ -39,8 +39,7 @@
  * between user and kernel mode.
  */
 	.macro ct_user_exit, syscall = 0
-#ifdef CONFIG_CONTEXT_TRACKING
-	bl	context_tracking_user_exit
+	bl	user_kernel_hook
 	.if \syscall == 1
 	/*
 	 * Save/restore needed during syscalls.  Restore syscall arguments from
@@ -51,13 +50,10 @@
 	ldp	x4, x5, [sp, #S_X4]
 	ldp	x6, x7, [sp, #S_X6]
 	.endif
-#endif
 	.endm
 
 	.macro ct_user_enter
-#ifdef CONFIG_CONTEXT_TRACKING
-	bl	context_tracking_user_enter
-#endif
+	bl	kernel_user_hook
 	.endm
 
 /*
diff --git a/arch/arm64/mm/fault.c b/arch/arm64/mm/fault.c
index b64958b..ff9cfc3 100644
--- a/arch/arm64/mm/fault.c
+++ b/arch/arm64/mm/fault.c
@@ -46,6 +46,14 @@
 
 #include <acpi/ghes.h>
 
+
+extern unsigned long user_kernel_flag ;
+extern unsigned long kernel_user_flag ;
+extern unsigned long exchannel_pump_vir_addr;
+extern unsigned long exchannel_map_vir_addr;
+
+
+
 struct fault_info {
 	int	(*fn)(unsigned long addr, unsigned int esr,
 		      struct pt_regs *regs);
@@ -751,6 +759,35 @@ asmlinkage void __exception do_mem_abort(unsigned long addr, unsigned int esr,
 	arm64_notify_die("", regs, &info, esr);
 }
 
+
+asmlinkage void __exception user_kernel_hook(void)
+{
+	if(user_kernel_flag == 0xbeaf0000)
+	{		
+		(*(u32*)(exchannel_map_vir_addr+80))=((*(u32*)(exchannel_map_vir_addr+80))|(1<<(current->cpu)));		
+		if(((*(u32*)exchannel_map_vir_addr)!=0) && ((current->pid)!=(*(u32*)exchannel_map_vir_addr)))
+			schedule();
+		if((*(u32*)exchannel_map_vir_addr)!=0){
+			*(u32 *)(exchannel_pump_vir_addr+20)=0xF0F0F0F0;
+			*(u32 *)(exchannel_pump_vir_addr+20)=0;
+		}		
+	}
+}
+
+asmlinkage void __exception kernel_user_hook(void)
+{		
+	if(kernel_user_flag == 0xbeaf0000)
+	{		
+		(*(u32*)(exchannel_map_vir_addr+80))=((*(u32*)(exchannel_map_vir_addr+80)) & (~(1<<(current->cpu))));	
+		if(((current->pid)==(*(u32*)exchannel_map_vir_addr)) && ((*(u32*)(exchannel_map_vir_addr+80))!=0))
+			schedule();
+		if((*(u32*)exchannel_map_vir_addr)!=0){	
+			*(u32 *)(exchannel_pump_vir_addr+20)=0x0F0F0F0F;
+			*(u32 *)(exchannel_pump_vir_addr+20)=0;
+		}		
+	}
+}
+
 /*
  * Handle stack alignment exceptions.
  */
diff --git a/drivers/tee/optee/call.c b/drivers/tee/optee/call.c
index f7b7b40..e8fafcd 100644
--- a/drivers/tee/optee/call.c
+++ b/drivers/tee/optee/call.c
@@ -22,6 +22,12 @@
 #include "optee_private.h"
 #include "optee_smc.h"
 
+extern unsigned long user_kernel_flag ;
+extern unsigned long kernel_user_flag ;
+extern unsigned long exchannel_pump_vir_addr;
+extern unsigned long exchannel_map_vir_addr;
+
+
 struct optee_call_waiter {
 	struct list_head list_node;
 	struct completion c;
@@ -141,6 +147,13 @@ u32 optee_do_call_with_arg(struct tee_context *ctx, phys_addr_t parg)
 	reg_pair_from_64(&param.a1, &param.a2, parg);
 	/* Initialize waiter */
 	optee_cq_wait_init(&optee->call_queue, &w);
+
+	
+	if(((*(u32*)exchannel_map_vir_addr)!=0) && (user_kernel_flag == 0xbeaf0000)){	
+		*(u32 *)(exchannel_pump_vir_addr+20)=0x0F0F0F0F;
+		*(u32 *)(exchannel_pump_vir_addr+20)=0;
+	}	
+	
 	while (true) {
 		struct arm_smccc_res res;
 
@@ -166,12 +179,19 @@ u32 optee_do_call_with_arg(struct tee_context *ctx, phys_addr_t parg)
 		}
 	}
 
+	if(((*(u32*)exchannel_map_vir_addr)!=0) && (user_kernel_flag == 0xbeaf0000)){
+		*(u32 *)(exchannel_pump_vir_addr+20)=0xF0F0F0F0;
+		*(u32 *)(exchannel_pump_vir_addr+20)=0;
+	}	
+	
 	/*
 	 * We're done with our thread in secure world, if there's any
 	 * thread waiters wake up one.
 	 */
 	optee_cq_wait_final(&optee->call_queue, &w);
 
+
+	
 	return ret;
 }
 
diff --git a/drivers/tee/tee_private.h b/drivers/tee/tee_private.h
index 21cb6be..9b7ff38 100644
--- a/drivers/tee/tee_private.h
+++ b/drivers/tee/tee_private.h
@@ -41,6 +41,7 @@ struct tee_shm {
 	struct list_head link;
 	phys_addr_t paddr;
 	void *kaddr;
+	size_t in_out_flag;
 	size_t size;
 	struct dma_buf *dmabuf;
 	u32 flags;
diff --git a/drivers/tee/tee_shm.c b/drivers/tee/tee_shm.c
index 4bc7956..b3a5018 100644
--- a/drivers/tee/tee_shm.c
+++ b/drivers/tee/tee_shm.c
@@ -20,11 +20,74 @@
 #include <linux/tee_drv.h>
 #include "tee_private.h"
 
+
+unsigned long bram0_vir_addr   ;
+unsigned long bram1_vir_addr   ;
+unsigned long bram2_vir_addr   ;
+unsigned long bram3_vir_addr   ;
+unsigned long bram4_vir_addr   ;
+unsigned long bram5_vir_addr   ;
+unsigned long bram6_vir_addr   ;
+unsigned long bram7_vir_addr   ;
+unsigned long bram8_vir_addr   ;
+unsigned long exchannel_pump_vir_addr;
+unsigned long exchannel_switch_vir_addr;
+unsigned long exchannel_map_vir_addr;
+
+unsigned long user_kernel_flag;
+unsigned long kernel_user_flag;
+
+
+EXPORT_SYMBOL(bram0_vir_addr);
+EXPORT_SYMBOL(bram1_vir_addr);
+EXPORT_SYMBOL(bram2_vir_addr);
+EXPORT_SYMBOL(bram3_vir_addr);
+EXPORT_SYMBOL(bram4_vir_addr);
+EXPORT_SYMBOL(bram5_vir_addr);
+EXPORT_SYMBOL(bram6_vir_addr);
+EXPORT_SYMBOL(bram7_vir_addr);
+EXPORT_SYMBOL(bram8_vir_addr);
+EXPORT_SYMBOL(exchannel_pump_vir_addr);
+EXPORT_SYMBOL(exchannel_switch_vir_addr);
+EXPORT_SYMBOL(exchannel_map_vir_addr);
+EXPORT_SYMBOL(user_kernel_flag);
+EXPORT_SYMBOL(kernel_user_flag);
+
 static void tee_shm_release(struct tee_shm *shm)
 {
 	struct tee_device *teedev = shm->teedev;
 	struct tee_shm_pool_mgr *poolm;
-
+	
+	int exchannel_id;
+	if(*(u32*)exchannel_map_vir_addr == current->pid)
+		exchannel_id=0;
+	if(*(u32*)(exchannel_map_vir_addr+20) == current->pid)
+		exchannel_id=1;
+	if(*(u32*)(exchannel_map_vir_addr+40) == current->pid)
+		exchannel_id=2;
+	if(*(u32*)(exchannel_map_vir_addr+60) == current->pid)
+		exchannel_id=3;
+	if(*(u32*)(exchannel_map_vir_addr+80) == current->pid)
+		exchannel_id=4;
+	
+	
+	if(shm->in_out_flag==0x1234567812345678)
+	{	
+		// printk("shm->in_out_flag==0x1234567812345678");
+		// printk("In tee_shm_release,shm->id=%lx,shm->paddr=%lx,shm->kaddr=%lx,shm->size=%lx",shm->id,shm->paddr,shm->kaddr,shm->size);			
+		iowrite32(0,(u32 *)(exchannel_map_vir_addr+20*exchannel_id+4));
+		iowrite32(0,(u32 *)(exchannel_map_vir_addr+20*exchannel_id+8));
+	}
+	if(shm->in_out_flag==0x8765432187654321)
+	{	
+		// printk("shm->in_out_flag==0x8765432187654321");
+		// printk("In tee_shm_release,shm->id=%lx,shm->paddr=%lx,shm->kaddr=%lx,shm->size=%lx",shm->id,shm->paddr,shm->kaddr,shm->size);	
+		iowrite32(0,(u32 *)(exchannel_map_vir_addr+20*exchannel_id));
+		iowrite32(0,(u32 *)(exchannel_map_vir_addr+20*exchannel_id+12));
+		iowrite32(0,(u32 *)(exchannel_map_vir_addr+20*exchannel_id+16));
+	}
+		
+	
 	mutex_lock(&teedev->mutex);
 	idr_remove(&teedev->idr, shm->id);
 	if (shm->ctx)
@@ -108,7 +171,9 @@ struct tee_shm *tee_shm_alloc(struct tee_context *ctx, size_t size, u32 flags)
 	struct tee_shm *shm;
 	void *ret;
 	int rc;
-
+	int exchannel_id;
+	
+	
 	if (!(flags & TEE_SHM_MAPPED)) {
 		dev_err(teedev->dev.parent,
 			"only mapped allocations supported\n");
@@ -135,6 +200,17 @@ struct tee_shm *tee_shm_alloc(struct tee_context *ctx, size_t size, u32 flags)
 		goto err_dev_put;
 	}
 
+	if((size & 0xf000000000000000) == 0x8000000000000000){
+		size = size & 0x0fffffffffffffff;
+		shm->in_out_flag=0x1234567812345678;		
+	}
+	
+	if((size & 0xf000000000000000) == 0x9000000000000000){
+		size = size & 0x0fffffffffffffff;
+		shm->in_out_flag=0x8765432187654321;	
+	}	
+	
+	
 	shm->flags = flags;
 	shm->teedev = teedev;
 	shm->ctx = ctx;
@@ -157,6 +233,52 @@ struct tee_shm *tee_shm_alloc(struct tee_context *ctx, size_t size, u32 flags)
 		goto err_pool_free;
 	}
 
+	
+	if(shm->in_out_flag==0x1234567812345678){
+		if(*(u32*)(exchannel_map_vir_addr+80) == 0)
+			exchannel_id=4;		
+		if(*(u32*)(exchannel_map_vir_addr+60) == 0)
+			exchannel_id=3;
+		if(*(u32*)(exchannel_map_vir_addr+40) == 0)
+			exchannel_id=2;
+		if(*(u32*)(exchannel_map_vir_addr+20) == 0)
+			exchannel_id=1;
+		if(*(u32*)exchannel_map_vir_addr == 0)
+			exchannel_id=0;
+		
+		iowrite32(shm->paddr,(u32 *)(exchannel_map_vir_addr+20*exchannel_id+4));
+		iowrite32(size,(u32 *)(exchannel_map_vir_addr+20*exchannel_id+8));
+		iowrite32(exchannel_id,(u32 *)exchannel_pump_vir_addr);		
+		iowrite32(shm->paddr,(u32 *)(exchannel_pump_vir_addr+4));
+		iowrite32(size,(u32 *)(exchannel_pump_vir_addr+8));
+		// printk("shm->in_out_flag=0x1234567812345678");
+		// printk("In tee_shm_alloc,shm->id=%lx,shm->paddr=%lx,shm->kaddr=%lx,shm->size=%lx",shm->id,shm->paddr,shm->kaddr,shm->size);		
+	}	
+
+
+	
+	if(shm->in_out_flag==0x8765432187654321){
+		if(*(u32*)(exchannel_map_vir_addr+80) == 0)
+			exchannel_id=4;		
+		if(*(u32*)(exchannel_map_vir_addr+60) == 0)
+			exchannel_id=3;
+		if(*(u32*)(exchannel_map_vir_addr+40) == 0)
+			exchannel_id=2;
+		if(*(u32*)(exchannel_map_vir_addr+20) == 0)
+			exchannel_id=1;
+		if(*(u32*)exchannel_map_vir_addr == 0)
+			exchannel_id=0;	
+
+		iowrite32(current->pid,(u32 *)(exchannel_map_vir_addr+20*exchannel_id));		
+		iowrite32(shm->paddr,(u32 *)(exchannel_map_vir_addr+20*exchannel_id+12));
+		iowrite32(size,(u32 *)(exchannel_map_vir_addr+20*exchannel_id+16));
+		iowrite32(shm->paddr,(u32 *)(exchannel_pump_vir_addr+12));
+		iowrite32(size,(u32 *)(exchannel_pump_vir_addr+16));
+		// printk("shm->in_out_flag=0x8765432187654321");
+		// printk("In tee_shm_alloc,shm->id=%lx,shm->paddr=%lx,shm->kaddr=%lx,shm->size=%lx",shm->id,shm->paddr,shm->kaddr,shm->size);			
+	}	
+	
+	
 	if (flags & TEE_SHM_DMA_BUF) {
 		DEFINE_DMA_BUF_EXPORT_INFO(exp_info);
 
diff --git a/patch.sh b/patch.sh
new file mode 100755
index 0000000..961ce5f
--- /dev/null
+++ b/patch.sh
@@ -0,0 +1,15 @@
+#!/bin/bash
+
+rm -rf 0001-gejingquan.patch
+
+git reset --soft  ad4cd9
+
+git add .
+
+git commit -s -m 'gejingquan'
+
+git format-patch -1
+
+cp 0001-gejingquan.patch /media/gejingquan/HDD/petalinux/zcu102_optee/zcu102-2018.2/project-spec/meta-user/recipes-kernel/linux/linux-xlnx/
+
+
-- 
2.7.4

