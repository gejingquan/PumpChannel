From c6e834d12cf9110b704b93714c58556e45f14c6b Mon Sep 17 00:00:00 2001
From: gerty1986823 <gerty1986823@126.com>
Date: Thu, 26 Nov 2020 17:13:37 +0800
Subject: [PATCH] gejingquan

Signed-off-by: gerty1986823 <gerty1986823@126.com>
---
 core/arch/arm/tee/entry_std.c | 37 ++++++++++++++++++++++++++++++-------
 core/kernel/tee_misc.c        |  3 ++-
 core/kernel/tee_ta_manager.c  |  4 ++--
 patch.sh                      | 15 +++++++++++++++
 4 files changed, 49 insertions(+), 10 deletions(-)
 create mode 100755 patch.sh

diff --git a/core/arch/arm/tee/entry_std.c b/core/arch/arm/tee/entry_std.c
index 876f97e..6a583e9 100644
--- a/core/arch/arm/tee/entry_std.c
+++ b/core/arch/arm/tee/entry_std.c
@@ -51,8 +51,10 @@ static bool __maybe_unused param_mem_from_mobj(struct param_mem *mem,
 		panic("mobj_get_pa failed");
 
 	if (!core_is_buffer_inside(pa, MAX(sz, 1UL), b, mobj->size))
+	{
+		EMSG("core_is_buffer_inside==false");		
 		return false;
-
+	}
 	mem->mobj = mobj;
 	mem->offs = pa - b;
 	mem->size = sz;
@@ -67,6 +69,8 @@ static TEE_Result set_tmem_param(const struct optee_msg_param_tmem *tmem,
 	paddr_t pa = READ_ONCE(tmem->buf_ptr);
 	size_t sz = READ_ONCE(tmem->size);
 
+	EMSG("pa=%lx,sz=%lx",pa,sz);
+	
 	/* Handle NULL memory reference */
 	if (!pa && !sz) {
 		mem->mobj = NULL;
@@ -77,6 +81,7 @@ static TEE_Result set_tmem_param(const struct optee_msg_param_tmem *tmem,
 
 	/* Handle non-contiguous reference from a shared memory area */
 	if (attr & OPTEE_MSG_ATTR_NONCONTIG) {
+		EMSG("attr & OPTEE_MSG_ATTR_NONCONTIG==true");
 		uint64_t shm_ref = READ_ONCE(tmem->shm_ref);
 
 		mem->mobj = msg_param_mobj_from_noncontig(pa, sz, shm_ref,
@@ -91,7 +96,10 @@ static TEE_Result set_tmem_param(const struct optee_msg_param_tmem *tmem,
 #ifdef CFG_CORE_RESERVED_SHM
 	/* Handle memory reference in the contiguous shared memory */
 	if (param_mem_from_mobj(mem, shm_mobj, pa, sz))
+	{	
+		EMSG("CFG_CORE_RESERVED_SHM==true,param_mem_from_mobj==true");
 		return TEE_SUCCESS;
+	}	
 #endif
 
 #ifdef CFG_SECURE_DATA_PATH
@@ -138,7 +146,8 @@ static TEE_Result copy_in_params(const struct optee_msg_param *params,
 	TEE_Result res;
 	size_t n;
 	uint8_t pt[TEE_NUM_PARAMS] = { 0 };
-
+	
+	
 	if (num_params > TEE_NUM_PARAMS)
 		return TEE_ERROR_BAD_PARAMETERS;
 
@@ -146,13 +155,14 @@ static TEE_Result copy_in_params(const struct optee_msg_param *params,
 
 	for (n = 0; n < num_params; n++) {
 		uint32_t attr;
-
+		
 		saved_attr[n] = READ_ONCE(params[n].attr);
 
 		if (saved_attr[n] & OPTEE_MSG_ATTR_META)
 			return TEE_ERROR_BAD_PARAMETERS;
 
 		attr = saved_attr[n] & OPTEE_MSG_ATTR_TYPE_MASK;
+				
 		switch (attr) {
 		case OPTEE_MSG_ATTR_TYPE_NONE:
 			pt[n] = TEE_PARAM_TYPE_NONE;
@@ -170,6 +180,7 @@ static TEE_Result copy_in_params(const struct optee_msg_param *params,
 		case OPTEE_MSG_ATTR_TYPE_TMEM_INOUT:
 			res = set_tmem_param(&params[n].u.tmem, saved_attr[n],
 					     &ta_param->u[n].mem);
+			EMSG("n=%lx,attr=%lx,res=%lx",n,attr,res);								 
 			if (res)
 				return res;
 			pt[n] = TEE_PARAM_TYPE_MEMREF_INPUT + attr -
@@ -379,24 +390,34 @@ static void entry_invoke_command(struct thread_smc_args *smc_args,
 	struct tee_ta_session *s;
 	struct tee_ta_param param = { 0 };
 	uint64_t saved_attr[TEE_NUM_PARAMS] = { 0 };
+	
 
 	bm_timestamp();
-
+	
+	EMSG("Before copy_in_params,res=%lx,err_orig=%lx",res,err_orig);
 	res = copy_in_params(arg->params, num_params, &param, saved_attr);
 	if (res != TEE_SUCCESS)
-		goto out;
-
+	{
+		EMSG("After copy_in_params,res=%lx,err_orig=%lx",res,err_orig);	
+		goto out;	
+	}
 	s = tee_ta_get_session(arg->session, true, &tee_open_sessions);
 	if (!s) {
 		res = TEE_ERROR_BAD_PARAMETERS;
 		goto out;
 	}
 
+	EMSG("After tee_ta_get_session,res=%lx,err_orig=%lx",res,err_orig);
+	
+	
 	res = tee_ta_invoke_command(&err_orig, s, NSAPP_IDENTITY,
 				    TEE_TIMEOUT_INFINITE, arg->func, &param);
-
+					
 	bm_timestamp();
 
+	EMSG("After tee_ta_invoke_command,res=%lx,err_orig=%lx",res,err_orig);		
+	
+	
 	tee_ta_put_session(s);
 
 	copy_out_param(&param, num_params, arg->params, saved_attr);
@@ -404,6 +425,8 @@ static void entry_invoke_command(struct thread_smc_args *smc_args,
 out:
 	cleanup_shm_refs(saved_attr, &param, num_params);
 
+	EMSG("After all,res=%lx,err_orig=%lx",res,err_orig);	
+	
 	arg->ret = res;
 	arg->ret_origin = err_orig;
 	smc_args->a0 = OPTEE_SMC_RETURN_OK;
diff --git a/core/kernel/tee_misc.c b/core/kernel/tee_misc.c
index a94ee86..aef5fa0 100644
--- a/core/kernel/tee_misc.c
+++ b/core/kernel/tee_misc.c
@@ -82,7 +82,8 @@ static bool is_valid_conf_and_notnull_size(
 
 /* Returns true when buffer 'b' is fully contained in area 'a' */
 bool _core_is_buffer_inside(vaddr_t b, size_t bl, vaddr_t a, size_t al)
-{
+{	
+	EMSG("b=%lx,bl=%lx,a=%lx,al=%lx",b,bl,a,al);
 	/* invalid config or "null size" return false */
 	if (!is_valid_conf_and_notnull_size(b, bl, a, al))
 		return false;
diff --git a/core/kernel/tee_ta_manager.c b/core/kernel/tee_ta_manager.c
index a4203f7..1376073 100644
--- a/core/kernel/tee_ta_manager.c
+++ b/core/kernel/tee_ta_manager.c
@@ -219,7 +219,7 @@ struct tee_ta_session *tee_ta_get_session(uint32_t id, bool exclusive,
 			struct tee_ta_session_head *open_sessions)
 {
 	struct tee_ta_session *s;
-
+		
 	mutex_lock(&tee_ta_mutex);
 
 	while (true) {
@@ -734,7 +734,7 @@ TEE_Result tee_ta_invoke_command(TEE_ErrorOrigin *err,
 				 struct tee_ta_param *param)
 {
 	TEE_Result res;
-
+	
 	if (check_client(sess, clnt_id) != TEE_SUCCESS)
 		return TEE_ERROR_BAD_PARAMETERS; /* intentional generic error */
 
diff --git a/patch.sh b/patch.sh
new file mode 100755
index 0000000..b653626
--- /dev/null
+++ b/patch.sh
@@ -0,0 +1,15 @@
+#!/bin/bash
+
+rm -rf 0001-gejingquan.patch
+
+git reset --soft f398d4
+
+git add .
+
+git commit -s -m 'gejingquan'
+
+git format-patch -1
+
+cp 0001-gejingquan.patch /media/gejingquan/HDD/petalinux/zcu102_optee/zcu102-2018.2/project-spec/meta-user/recipes-bsp/optee-os/files/
+
+
-- 
2.7.4

